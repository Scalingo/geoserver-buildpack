#!/usr/bin/env bash

set -eo pipefail

if [ -n "${BUILDPACK_DEBUG}" ]
then
    set -x
fi

readonly BUILD_DIR="${1}"
readonly CACHE_DIR="${2}"
readonly ENV_DIR="${3}"

readonly BASE_DIR="$( cd -P "$( dirname "$0" )" && pwd )"
readonly BUILDPACK_DIR="$( readlink -f "${BASE_DIR}/.." )"



GEOSERVER_DATASTORE_DESCRIPTION="${GEOSERVER_DATASTORE_DESCRIPTION:-''}"
export GEOSERVER_DATASTORE_DESCRIPTION

readonly geoserver_version="${GEOSERVER_VERSION:-2.21.1}"
readonly geoserver_config_script="${GEOSERVER_CONFIG_SCRIPT:-/app/configure-geoserver.sh}"
readonly geoserver_config_dir="${GEOSERVER_CONFIG_DIR:-${HOME}/geoserver}"
readonly geoserver_data_dir="${GEOSERVER_DATA_DIR:-/app/geoserver-data}"

readonly config_script="${geoserver_config_script//\/app/$BUILD_DIR}"
readonly data_dir="${geoserver_data_dir//\/app/$BUILD_DIR}"

JAVA_VERSION="${JAVA_VERSION:-11}"
export JAVA_VERSION


# "Include" functions:
source "${BUILDPACK_DIR}/bin/geoserver.fn.sh"


check_environment

echo "---> Running with:"
print_environment

echo "---> Installing JRE ${java_version}"
install_java_webapp_runner "${BUILD_DIR}" "${CACHE_DIR}" "${ENV_DIR}"


get_geoserver "${BUILD_DIR}" "${CACHE_DIR}" "${geoserver_version}"


# Make sure GeoServer data directory exists:
mkdir -p "${data_dir}"


# Configure GeoServer:
readonly temp_port="4231"
readonly temp_host="http://localhost:${temp_port}"

# Modify environment var since we are in the BUILD phase
# Otherwise data put in `GEOSERVER_DATA_DIR` would be lost when the
# container is put in production (`/app` will be overridden).
GEOSERVER_DATA_DIR="${data_dir}"
export GEOSERVER_DATA_DIR

run_geoserver "${BUILD_DIR}" "${temp_port}"
readonly geoserver_pid="${!}"

if [ -n "${geoserver_pid}" ]
then
    echo "---> Started temporary GeoServer on ${temp_host} (pid: ${geoserver_pid})"
    curl --silent --retry 8 --retry-connrefused -4 \
        "${temp_host}"

    echo "---> Processing configuration templates"
    export_db_conn

    while IFS= read -r -d '' file
    do
        do_template "${file}"
    done < <( find "${BUILDPACK_DIR}/config" -name "*.erb" -print0 )

    while IFS= read -r -d '' file
    do
        do_template "${file}"
    done < <( find "${geoserver_config_dir}" -name "*.erb" -print0 )


    # Configuring GeoServer:
    readonly default_user="admin"
    readonly default_pass="geoserver"

    echo "---> Creating ${GEOSERVER_WORKSPACE_NAME} workspace"
    create_workspace "${BUILDPACK_DIR}" "${temp_host}" \
        "${default_user}" "${default_pass}"

    echo "---> Creating ${GEOSERVER_DATASTORE_NAME} datastore"
    create_datastore "${BUILDPACK_DIR}" "${temp_host}" \
        "${default_user}" "${default_pass}"


    # Import customer's configuration:
    if [ -f "${config_script}" ]
    then
        echo "---> Importing configuration"
        source "${config_script}"
    fi


    echo "---> Enforcing GeoWebCache disk quota"
    enforce_geowebcache_diskquota "${BUILDPACK_DIR}"

    echo "---> Enforcing logging to stdout"
    enforce_logging_to_stdout "${BUILDPACK_DIR}" "${temp_host}" \
        "${default_user}" "${default_pass}"

    echo "---> Removing master password info file"
    remove_masterpw

    echo "---> Setting admin user account password"
    set_admin_password "${BUILDPACK_DIR}" "${temp_host}" \
        "${default_user}" "${default_pass}"


    # Stop the temporary GeoServer:
    echo "---> Stopping temporary GeoServer"
    stop_geoserver "${geoserver_pid}"
else
    echo "!! Unable to start temporary GeoServer. Aborting." >&2
    exit 1
fi


# Copy startup script:
mkdir -p "${BUILD_DIR}/bin"
cp "${BUILDPACK_DIR}/bin/startup.sh" "${BUILD_DIR}/bin/"


# Leaving the BUILD phase, setting `GEOSERVER_DATA_DIR` back to its
# initial value.
GEOSERVER_DATA_DIR="${geoserver_data_dir}"
export GEOSERVER_DATA_DIR

# Make sure GEOSERVER_DATA_DIR is exported when RUNning:
cat > "${BUILD_DIR}/.profile.d/geoserver.sh" << EOF
export GEOSERVER_DATA_DIR="${geoserver_data_dir}"
EOF


exit 0
