#!/usr/bin/env bash

set -eo pipefail

if [ -n "${BUILDPACK_DEBUG}" ]
then
    set -x
fi

readonly build_dir="${1}"
readonly cache_dir="${2}"

readonly base_dir="$( cd -P "$( dirname "$0" )" && pwd )"
readonly buildpack_dir="$( readlink -f "${base_dir}/.." )"



GEOSERVER_DATASTORE_DESCRIPTION="${GEOSERVER_DATASTORE_DESCRIPTION:-''}"
export GEOSERVER_DATASTORE_DESCRIPTION

readonly geoserver_version="${GEOSERVER_VERSION:-2.21.1}"
readonly geoserver_config_script="${GEOSERVER_CONFIG_SCRIPT:-/app/configure-geoserver.sh}"
readonly geoserver_config_dir="${GEOSERVER_CONFIG_DIR:-${HOME}/geoserver}"
readonly geoserver_data_dir="${GEOSERVER_DATA_DIR:-/app/geoserver-data}"

readonly config_script="${geoserver_config_script//\/app/$build_dir}"
readonly data_dir="${geoserver_data_dir//\/app/$build_dir}"

readonly java_version="${JAVA_VERSION:-11}"
readonly webapp_runner_version="${JAVA_WEBAPP_RUNNER_VERSION:-9.0.52.1}"


# "Include" functions:
source "${buildpack_dir}/bin/geoserver.fn.sh"


check_environment

echo "---> Running with:"
print_environment

echo "---> Installing JRE ${java_version}"
install_webapp_runner "${build_dir}" "${cache_dir}" \
    "${java_version}" "${webapp_runner_version}" \
    || {
        echo "!! Unable to install JRE. Aborting." >&2
        exit 1
    }


get_geoserver "${build_dir}" "${cache_dir}" "${geoserver_version}"


# Make sure GeoServer data directory exists:
mkdir -p "${data_dir}"


# Configure GeoServer:
readonly temp_port="4231"
readonly temp_host="http://localhost:${temp_port}"

# Modify environment var since we are in the BUILD phase
# Otherwise data put in `GEOSERVER_DATA_DIR` would be lost when the
# container is put in production (`/app` will be overridden).
GEOSERVER_DATA_DIR="${data_dir}"
export GEOSERVER_DATA_DIR

run_geoserver "${build_dir}" "${temp_port}"
readonly geoserver_pid="${!}"

if [ -n "${geoserver_pid}" ]
then
    echo "---> Started temporary GeoServer on ${temp_host} (pid: ${geoserver_pid})"
    curl --silent --retry 6 --retry-connrefused --retry-delay 0 -4 \
        "${temp_host}"

    echo "---> Processing configuration templates"
    export_db_conn

    while IFS= read -r -d '' file
    do
        do_template "${file}"
    done < <( find "${buildpack_dir}/config" -name "*.erb" -print0 )

    while IFS= read -r -d '' file
    do
        do_template "${file}"
    done < <( find "${geoserver_config_dir}" -name "*.erb" -print0 )


    # Configuring GeoServer:
    readonly default_user="admin"
    readonly default_pass="geoserver"

    echo "---> Creating ${GEOSERVER_WORKSPACE_NAME} workspace"
    create_workspace "${buildpack_dir}" "${temp_host}" \
        "${default_user}" "${default_pass}"

    echo "---> Creating ${GEOSERVER_DATASTORE_NAME} datastore"
    create_datastore "${buildpack_dir}" "${temp_host}" \
        "${default_user}" "${default_pass}"


    # Import customer's configuration:
    if [ -f "${config_script}" ]
    then
        echo "---> Importing configuration"
        source "${config_script}"
    fi


    echo "---> Enforcing GeoWebCache disk quota"
    enforce_geowebcache_diskquota "${buildpack_dir}"

    echo "---> Enforcing logging to stdout"
    enforce_logging_to_stdout "${buildpack_dir}" "${temp_host}" \
        "${default_user}" "${default_pass}"

    echo "---> Removing master password info file"
    remove_masterpw

    echo "---> Setting admin user account password"
    set_admin_password "${buildpack_dir}" "${temp_host}" \
        "${default_user}" "${default_pass}"


    # Stop the temporary GeoServer:
    echo "---> Stopping temporary GeoServer"
    stop_geoserver "${geoserver_pid}"
else
    echo "!! Unable to start temporary GeoServer. Aborting." >&2
    exit 1
fi


# Copy startup script:
mkdir -p "${build_dir}/bin"
cp "${buildpack_dir}/bin/startup.sh" "${build_dir}/bin/"


# Leaving the BUILD phase, setting `GEOSERVER_DATA_DIR` back to its
# initial value.
export GEOSERVER_DATA_DIR="${geoserver_data_dir}"

# Make sure GEOSERVER_DATA_DIR is exported when RUNning:
cat > "${build_dir}/.profile.d/geoserver.sh" << EOF
export GEOSERVER_DATA_DIR="${geoserver_data_dir}"
EOF


exit 0
